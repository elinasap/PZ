
#include <iostream>
#include <math.h>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>



using namespace std;
using namespace cv;

int main()
{
	const int n = 4;
	Mat apple[n];
	apple[0] = imread("C:\pz6\apple_1");
	apple[1] = imread("C:\pz6\apple_2");
	apple[2] = imread("C:\pz6\apple_3");
	apple[3] = imread("C:\pz6\apple_4");

	Mat hsvaplle[n];
	for (int i = 0; i < n; i++)
	{
		cvtColor(apple[i], hsvaplle[i], COLOR_BGR2HSV); 
	};

	int h_bins = 50;
	int s_bins = 60;
	int histSize[] = { h_bins,s_bins };
	float h_ranges[] = { 0,180 };
	float s_ranges[] = { 0,256 };
	const float* ranges[] = { h_ranges,s_ranges };
	int channels[] = {1,2};

	MatND hist[n];//гистограмма


	for (int i = 0; i < n; i++)
	{
		calcHist(&hsvaplle[i], 1, channels, Mat(), hist[i], 2, histSize, ranges, true, false);
		normalize(hist[i], hist[i], 0, 1, NORM_MINMAX, -1, Mat());
	}

	double in = 0;
	int i_in, j_in;
	double apcompare[n][n];
	for (int i = 0; i < n; i++)
		for (int j = i; j < n; j++)
		{
			apcompare[i][j] = compareHist(hist[i], hist[j], HISTCMP_CORREL);
			cout << "Cравнениe " << i + 1 << " и " << j + 1 << ": " << apcompare[i][j] << endl;
			if ((in < apcompare[i][j]) && (i != j))
			{
				in = apcompare[i][j];
				i_in = i;
				j_in = j;
			}
		}
	cout << "Максимально похожи " << i_in + 1 << " и " << j_in + 1;

	waitKey();
	return 0;
}

